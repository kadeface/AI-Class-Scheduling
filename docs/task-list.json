{
  "project_name": "智能排课排场室系统 (K-12版)",
  "project_description": "根据产品需求文档(PRD)V1.0生成的详细开发任务列表，已优化依赖关系、优先级和里程碑。",
  "task_list": [
    {
      "task_id": "TKS-001",
      "title": "[后端] 搭建项目基础架构和数据库模型",
      "description": "初始化后端项目，配置数据库连接，并根据PRD设计用户、角色、教师、班级、课程、场室等核心数据表的结构。",
      "epic": "基础数据设置",
      "milestone": "V1.0 (MVP)",
      "dependencies": [],
      "priority": "高",
      "status": "Done",
      "effort_points": 5,
      "tags": ["backend", "database", "setup"],
      "acceptance_criteria": [
        "✅ 数据库中已创建所有需要的表结构",
        "✅ 后端项目可以成功运行并连接到数据库"
      ],
      "completion_summary": {
        "completed_date": "2024-06-30",
        "actual_effort": 5,
        "deliverables": [
          "Express.js后端项目结构 (src/)",
          "MongoDB数据库连接配置 (config/database.ts)",
          "6个核心数据模型 (User, Teacher, Class, Course, Room, Schedule)",
          "环境配置文件 (.env, tsconfig.json)",
          "数据库初始化脚本 (scripts/init-database.ts)",
          "项目启动脚本和基础API健康检查"
        ],
        "challenges_and_solutions": [
          {
            "challenge": "better-sqlite3编译失败 - 缺少Visual Studio构建工具",
            "solution": "改用MongoDB数据库，避免了原生模块编译问题"
          },
          {
            "challenge": "缺少dotenv等依赖包导致TypeScript编译错误",
            "solution": "按组分批安装依赖：核心框架 -> 数据库 -> 工具库 -> 类型定义"
          },
          {
            "challenge": "Express路由path-to-regexp解析错误",
            "solution": "移除通配符路由 app.all('*')，改用简化的路由结构"
          },
          {
            "challenge": "Mongoose重复索引警告",
            "solution": "分离字段定义中的unique和Schema.index()定义，避免重复声明"
          }
        ],
        "key_learnings": [
          "Windows环境下应优先选择无需编译的数据库方案",
          "依赖安装应按功能模块分组进行，便于排查问题",
          "Express路由定义需谨慎处理通配符，避免path-to-regexp解析错误",
          "MongoDB Schema设计中索引定义应统一在index()方法中处理"
        ]
      }
    },
    {
      "task_id": "TKS-002",
      "title": "[后端] 开发用户与角色管理的API",
      "description": "提供对用户和角色的CRUD（创建、读取、更新、删除）操作的RESTful API。",
      "epic": "基础数据设置",
      "milestone": "V1.0 (MVP)",
      "dependencies": ["TKS-001"],
      "priority": "高",
      "status": "Done",
      "effort_points": 3,
      "tags": ["backend", "api", "user-management"],
      "acceptance_criteria": [
        "✅ API能够创建、查询、编辑和删除用户",
        "✅ API能够为用户分配角色"
      ],
      "completion_summary": {
        "completed_date": "2024-12-19",
        "actual_effort": 3,
        "deliverables": [
          "用户API类型定义 (types/api.ts)",
          "请求验证中间件 (middleware/validation.ts)",
          "用户控制器 (controllers/user-controller.ts)",
          "用户路由配置 (routes/user-routes.ts)",
          "主应用路由注册 (index.ts更新)",
          "API测试指南文档 (docs/api-testing-guide.md)"
        ],
        "challenges_and_solutions": [
          {
            "challenge": "复杂的数据验证逻辑 - 需要验证用户名唯一性、工号唯一性等",
            "solution": "创建专门的validation中间件，分离创建和更新验证逻辑"
          },
          {
            "challenge": "用户信息更新的部分字段更新逻辑",
            "solution": "使用MongoDB的$set操作符和动态构建更新对象，只更新提供的字段"
          },
          {
            "challenge": "密码安全处理 - 避免在API响应中泄露密码",
            "solution": "创建transformUserToResponse函数，所有查询操作使用.select('-password')排除密码字段"
          },
          {
            "challenge": "软删除vs硬删除的API设计",
            "solution": "提供两个删除端点：DELETE /users/:id (软删除) 和 DELETE /users/:id/permanent (硬删除)"
          }
        ],
        "key_learnings": [
          "API设计应该考虑数据安全，敏感信息如密码不应在响应中返回",
          "复杂验证逻辑应该封装在中间件中，保持控制器代码的简洁",
          "RESTful API设计需要考虑不同的业务场景，如软删除和硬删除",
          "TypeScript类型定义应该在项目早期建立，有助于保证API的一致性",
          "MongoDB查询优化：使用lean()方法提高查询性能，合理使用索引"
        ]
      }
    },
    {
      "task_id": "TKS-003",
      "title": "[前端] 开发基础数据管理界面框架",
      "description": "搭建前端项目框架，并创建左侧导航栏和主内容区布局，用于承载后续的各个管理模块。",
      "epic": "基础数据设置",
      "milestone": "V1.0 (MVP)",
      "dependencies": [],
      "priority": "高",
      "status": "Done",
      "effort_points": 3,
      "tags": ["frontend", "ui", "setup"],
      "acceptance_criteria": [
        "✅ 页面包含清晰的导航结构",
        "✅ 为教师管理、班级管理等功能预留了路由和入口"
      ],
      "completion_summary": {
        "completed_date": "2024-12-19",
        "actual_effort": 3,
        "deliverables": [
          "Next.js 15 + TypeScript项目架构",
          "基础UI组件库 (components/ui/)",
          "布局组件系统 (components/layout/)",
          "多级侧边导航栏 (sidebar.tsx)",
          "响应式页面头部 (header.tsx)",
          "仪表盘主布局 (dashboard-layout.tsx)",
          "导航配置和类型定义 (lib/navigation.ts, types/navigation.ts)",
          "工具函数库 (lib/utils.ts)",
          "系统主页面和管理模块页面",
          "5个管理模块占位页面 (users, teachers, classes, courses, rooms)",
          "全局样式和主题配置 (globals.css)",
          "路由结构和页面布局"
        ],
        "challenges_and_solutions": [
          {
            "challenge": "多级导航菜单的展开/折叠状态管理",
            "solution": "使用React useState和useEffect，结合Framer Motion实现平滑动画过渡"
          },
          {
            "challenge": "响应式布局在不同屏幕尺寸下的适配",
            "solution": "采用Tailwind CSS的响应式类名，配合flexbox和grid布局系统"
          },
          {
            "challenge": "暗色模式和明色模式的主题切换",
            "solution": "通过CSS变量和Tailwind CSS的dark:类名实现主题系统"
          },
          {
            "challenge": "TypeScript类型安全和组件props验证",
            "solution": "创建完整的类型定义文件，使用interface约束组件属性"
          },
          {
            "challenge": "导航状态与当前页面路由的同步",
            "solution": "使用Next.js的usePathname hook实现路由匹配和active状态管理"
          }
        ],
        "key_learnings": [
          "Next.js 15 App Router的文件路由系统简化了路由配置",
          "Framer Motion提供了丰富的动画能力，显著提升用户体验",
          "Radix UI组件库的无障碍访问特性符合现代Web标准",
          "TypeScript的严格类型检查有助于提前发现潜在问题",
          "组件化架构设计有利于后续功能模块的快速开发",
          "CSS变量配合Tailwind CSS实现主题系统的最佳实践",
          "响应式设计需要在设计阶段就考虑不同设备的使用场景"
        ]
      }
    },
    {
        "task_id": "TKS-004",
        "title": "[后端] 开发教学资源 (教师/班级/课程/场室) 管理的API",
        "description": "为教师、班级、课程、场室等核心教学资源提供CRUD API。",
        "epic": "基础数据设置",
        "milestone": "V1.0 (MVP)",
        "dependencies": ["TKS-001"],
        "priority": "高",
        "status": "Done",
        "effort_points": 8,
        "tags": ["backend", "api"],
        "acceptance_criteria": [
          "✅ 可以增删改查教师档案",
          "✅ 可以增删改查班级信息",
          "✅ 可以增删改查课程信息",
          "✅ 可以增删改查场室信息"
        ],
        "completion_summary": {
          "completed_date": "2024-12-19",
          "actual_effort": 8,
          "deliverables": [
            "教师数据模型和API类型定义 (Teacher.ts, api.ts)",
            "班级数据模型和API类型定义 (Class.ts, api.ts)",
            "课程数据模型和API类型定义 (Course.ts, api.ts)",
            "场室数据模型和API类型定义 (Room.ts, api.ts)",
            "四个资源的完整验证中间件 (validation.ts扩展)",
            "四个资源的CRUD控制器 (teacher-controller.ts, class-controller.ts, course-controller.ts, room-controller.ts)",
            "四个资源的RESTful路由配置 (teacher-routes.ts, class-routes.ts, course-routes.ts, room-routes.ts)",
            "主应用路由注册 (index.ts更新)",
            "完整的API测试指南文档 (api-testing-guide.md扩展)"
          ],
          "challenges_and_solutions": [
            {
              "challenge": "复杂的关联数据验证 - 教师、班级、课程、场室之间的依赖关系验证",
              "solution": "设计分层验证策略，在业务逻辑层处理关联验证，数据层专注格式验证"
            },
            {
              "challenge": "多样化的查询需求 - 不同资源需要不同的筛选和排序方式",
              "solution": "采用统一的查询接口设计，通过泛型和枚举实现类型安全的查询构建"
            },
            {
              "challenge": "时间段数据结构复杂性 - 教师不可用时间、场室不可用时间的建模",
              "solution": "抽象出TimeSlot通用接口，支持灵活的时间段表示和验证"
            },
            {
              "challenge": "课程场地要求的复杂性 - 多种教室类型、设备要求的组合",
              "solution": "设计RoomRequirement接口，支持类型、容量、设备的多维度要求表达"
            }
          ],
          "key_learnings": [
            "MongoDB关联查询使用populate()实现，需要合理设计引用关系",
            "复杂业务逻辑的API设计应分离验证、业务处理、数据持久化三层",
            "TypeScript类型定义应在项目架构设计阶段就确立，避免后期重构",
            "RESTful API设计需要考虑资源的生命周期管理（软删除vs硬删除）",
            "教育领域的排课系统需要灵活的时间段和约束表达能力"
          ]
        }
      },
      {
        "task_id": "TKS-005",
        "title": "[前端] 开发教学资源管理界面",
        "description": "开发用于管理教师、班级、课程、场室的前端界面，包括列表展示、搜索、新建和编辑表单。",
        "epic": "基础数据设置",
        "milestone": "V1.0 (MVP)",
        "dependencies": ["TKS-003", "TKS-004"],
        "priority": "高",
        "status": "Done",
        "effort_points": 8,
        "tags": ["frontend", "ui"],
        "acceptance_criteria": [
          "✅ 用户可以在界面上完成对教师、班级、课程、场室的增删改查操作",
          "✅ 表单有合理的校验规则",
          "✅ 用户可以下载Excel/CSV导入模板",
          "✅ 用户可以通过CSV文件批量导入数据",
          "✅ 导入过程有数据验证和错误提示"
        ],
        "completion_summary": {
          "completed_date": "2024-12-19",
          "actual_effort": 8,
          "deliverables": [
            "前端API调用工具函数库 (lib/api.ts)",
            "通用UI组件库 (components/ui/)",
            "数据表格组件 (data-table.tsx)",
            "对话框组件 (dialog.tsx)",
            "表单输入组件 (input.tsx, select.tsx)",
            "教师管理页面 (app/management/teachers/page.tsx)",
            "班级管理页面 (app/management/classes/page.tsx)",
            "课程管理页面 (app/management/courses/page.tsx)",
            "场室管理页面 (app/management/rooms/page.tsx)",
            "完整的CRUD功能实现（增删改查、搜索、分页）",
            "表单验证和错误处理机制",
            "响应式设计和暗色模式支持",
            "CSV数据处理工具函数库 (lib/csv.ts)",
            "导入模板定义和验证 (lib/import-templates.ts)",
            "通用数据导入对话框组件 (components/ui/import-dialog.tsx)",
            "四个管理页面的批量导入功能集成",
            "Excel/CSV模板下载和数据验证功能"
          ],
          "challenges_and_solutions": [
            {
              "challenge": "复杂表单数据的状态管理 - 特别是课程的场地要求和教师的时间偏好",
              "solution": "使用React useState进行细粒度状态管理，为复杂对象设计专门的处理函数"
            },
            {
              "challenge": "多资源间的关联展示 - 班级关联教师和教室，场室关联班级等",
              "solution": "在API层面实现populate查询，前端通过下拉选择和关联信息展示处理"
            },
            {
              "challenge": "通用组件的抽象设计 - 既要满足多种数据类型又要保持类型安全",
              "solution": "使用TypeScript泛型设计通用组件，通过render props模式实现自定义渲染"
            },
            {
              "challenge": "表单验证的复杂性 - 不同资源有不同的验证规则",
              "solution": "为每个资源创建独立的验证函数，统一错误状态管理模式"
            },
            {
              "challenge": "批量导入功能的实现 - 需要支持CSV解析、数据验证、错误处理",
              "solution": "创建通用的CSV处理工具库和导入组件，支持模板下载、数据预览、分步导入流程"
            },
            {
              "challenge": "不同资源的导入模板设计 - 每种资源有不同的字段和验证规则",
              "solution": "设计统一的导入模板接口，为每种资源定义专门的验证器和格式化函数"
            }
          ],
          "key_learnings": [
            "React组件的可复用性设计需要在通用性和特定性之间找到平衡",
            "TypeScript泛型在复杂数据表格中的应用可以显著提高代码质量",
            "表单状态管理应该考虑嵌套对象和数组的场景",
            "UI组件库的设计应该从项目的实际需求出发，避免过度抽象",
            "前端API调用应该统一错误处理和加载状态管理",
            "响应式设计需要在组件级别考虑不同屏幕尺寸的适配",
            "CSV数据处理需要考虑字符编码、特殊字符转义、数据验证等细节",
            "批量导入功能的用户体验设计：模板下载→数据填写→文件上传→预览验证→导入执行→结果反馈",
            "通用导入组件设计需要平衡灵活性和类型安全，泛型接口是关键",
            "大批量数据处理应该提供进度反馈和错误详情，增强用户体验"
          ]
        }
      },
      {
        "task_id": "TKS-006",
        "title": "[后端] 开发教学计划与排课规则API",
        "description": "开发API用于设置班级的教学计划（哪个班上什么课由谁教），以及设置全局排课规则。",
        "epic": "基础数据设置",
        "milestone": "V1.0 (MVP)",
        "dependencies": ["TKS-004"],
        "priority": "高",
        "status": "Done",
        "effort_points": 5,
        "tags": ["backend", "api"],
        "acceptance_criteria": [
          "✅ 可以为每个班级指定课程和授课老师",
          "✅ 可以设置连排、场地要求等规则"
        ],
        "completion_summary": {
          "completed_date": "2024-12-19",
          "actual_effort": 5,
          "deliverables": [
            "教学计划数据模型 (TeachingPlan.ts) - 支持班级课程安排配置",
            "排课规则数据模型 (SchedulingRules.ts) - 完整的约束规则体系",
            "API类型定义扩展 (api.ts) - 教学计划和排课规则接口",
            "验证中间件扩展 (validation.ts) - 复杂数据结构验证",
            "教学计划控制器 (teaching-plan-controller.ts) - CRUD + 审批功能",
            "排课规则控制器 (scheduling-rules-controller.ts) - CRUD + 默认规则管理",
            "RESTful路由配置和主应用注册",
            "API测试指南文档更新"
          ],
          "challenges_and_solutions": [
            {
              "challenge": "复杂的教学计划数据结构设计 - 需要支持多课程、多教师、时间偏好等复杂配置",
              "solution": "设计ICourseAssignment嵌套接口，支持课程-教师映射和灵活的时间偏好配置"
            },
            {
              "challenge": "排课规则的多层次约束体系 - 时间、教师、教室、课程等多维度规则管理",
              "solution": "分层设计约束接口：TimeRules、TeacherConstraints、RoomConstraints等，保持结构清晰可维护"
            },
            {
              "challenge": "教学计划的业务流程管理 - 草稿、审批、激活等状态转换和权限控制",
              "solution": "实现完整的状态机和审批流程，支持状态追踪和权限验证"
            },
            {
              "challenge": "排课规则的默认机制和版本管理 - 跨学期规则继承和默认配置",
              "solution": "设计唯一性约束和静态方法，支持默认规则设置、规则复制和版本管理"
            }
          ],
          "key_learnings": [
            "复杂业务模型设计需要平衡灵活性和约束性，过度灵活会导致数据一致性问题",
            "嵌套数据结构的验证需要递归验证策略，确保数据完整性和业务逻辑正确性",
            "教育业务的状态管理往往涉及审批流程，需要考虑权限控制和操作历史追踪",
            "默认配置的设计要考虑数据迁移、版本兼容性和业务连续性问题",
            "排课系统的约束规则设计是核心技术难点，直接影响后续智能排课算法的实现效果",
            "API设计应该考虑业务场景的复杂性，提供足够的灵活性同时保持接口的简洁性"
          ]
        }
      },
      {
        "task_id": "TKS-007",
        "title": "[前端] 开发教学计划与排课规则界面",
        "description": "开发用于设置教学计划和排课规则的前端界面。",
        "epic": "基础数据设置",
        "milestone": "V1.0 (MVP)",
        "dependencies": ["TKS-005", "TKS-006"],
        "priority": "高",
        "status": "Done",
        "effort_points": 5,
        "tags": ["frontend", "ui"],
        "acceptance_criteria": [
          "用户可以通过界面完成教学计划的配置",
          "用户可以设置班级课程和授课教师",
          "用户可以配置全局排课规则"
        ],
        "completed_date": "2025-01-01",
        "completion_summary": "完成了教学计划与排课规则管理的完整前端界面开发。主要成果包括：\n\n**教学计划管理功能：**\n- 实现了完整的新建教学计划对话框界面\n- 支持基本信息配置（班级、学年、学期选择）\n- 实现了动态课程安排功能（可添加/删除课程，配置课程-教师-课时）\n- 添加了连续排课选项和备注功能\n- 优化了班级选择流程（学年→学期→班级），解决了班级重复问题\n- 集成了基础数据API（班级、课程、教师）\n\n**排课规则管理功能：**\n- 开发了6个标签页的完整排课规则配置界面\n- 基本信息：规则名称、学校类型、学年学期、默认规则设置\n- 时间规则：每日课时、课时时长、休息时间、工作日设置\n- 教师约束：工作时间限制、连续课时控制、时间偏好\n- 教室约束：容量限制、共享规则、特殊教室优先级\n- 课程规则：分布策略、连续安排、核心课程优先\n- 冲突解决：多维度冲突处理策略和手动覆盖选项\n- 实现了编辑、查看、复制排课规则的完整功能\n\n**技术成果：**\n- 修复了Select组件兼容性问题，支持两种使用方式\n- 解决了CORS配置问题，支持多端口访问\n- 修复了DataTable组件的安全性问题\n- 完善了API常量定义（WEEKDAY_OPTIONS、DISTRIBUTION_POLICIES等）\n- 解决了TypeScript编译错误和模块重复声明问题\n\n**用户体验优化：**\n- 大型对话框适配多设备屏幕\n- 分标签页组织复杂配置内容\n- 智能默认值和表单验证\n- 统一的UI交互体验和错误处理\n\n所有功能已通过测试，用户可以完整地进行教学计划和排课规则的创建、编辑、查看和管理操作。",
        "technical_insights": {
          "challenges_solved": [
            "Select组件兼容性：通过支持options属性和children元素两种使用方式解决了组件复用问题",
            "CORS跨域访问：修复后端CORS配置支持前端多端口开发环境",
            "班级选择重复：通过学年→学期→班级的层级选择流程解决了同名班级无法区分的问题",
            "常量重复声明：重构API常量定义，避免WEEKDAYS重复声明导致的编译错误",
            "复杂表单状态：通过分标签页和状态管理优化了大型配置表单的用户体验"
          ],
          "technical_decisions": [
            "采用6个标签页分别配置不同维度的排课约束，提升配置的逻辑性和可维护性",
            "实现了智能的班级数据加载策略，按学年学期动态筛选班级列表",
            "设计了统一的对话框状态管理模式，支持新建、编辑、查看、复制多种操作",
            "建立了完整的API常量体系，为后续开发提供标准化的数据选项",
            "采用了响应式布局和大型对话框设计，适配不同屏幕尺寸的使用场景"
          ],
          "lessons_learned": [
            "复杂业务配置界面需要合理的信息架构设计，分层分类有助于用户理解",
            "前端组件设计要考虑多种使用场景，提供灵活的API接口",
            "教育业务的数据关联性强，需要智能的数据筛选和级联选择机制",
            "排课约束规则设计复杂，需要专业的UI设计来简化用户操作流程",
            "开发环境的配置问题（如CORS）要及时解决，避免影响功能测试"
          ]
        }
      },
      {
        "task_id": "TKS-008",
        "title": "[后端] 研发核心排课算法",
        "description": "设计并实现满足硬约束和软约束的智能排课算法。这是系统的技术核心，需要重点投入。",
        "epic": "智能排课引擎",
        "milestone": "V1.0 (MVP)",
        "dependencies": ["TKS-006"],
        "priority": "高",
        "status": "To Do",
        "effort_points": 8,
        "tags": ["backend", "algorithm"],
        "acceptance_criteria": [
          "算法能处理所有预设的硬约束",
          "算法能生成一份无硬性冲突的课表",
          "算法能返回无法满足的冲突列表"
        ]
      },
      {
        "task_id": "TKS-009",
        "title": "[后端] <一键排课>功能API封装",
        "description": "将排课算法封装成一个异步API。接收到请求后开始计算，并允许前端轮询查询结果。",
        "epic": "智能排课引擎",
        "milestone": "V1.0 (MVP)",
        "dependencies": ["TKS-008"],
        "priority": "高",
        "status": "To Do",
        "effort_points": 3,
        "tags": ["backend", "api"],
        "acceptance_criteria": [
          "提供一个API触发排课任务",
          "提供一个API查询排课进度和结果"
        ]
      },
      {
        "task_id": "TKS-010",
        "title": "[前端] 可视化课表组件开发",
        "description": "开发网格化的课表组件，用于展示排课结果，并支持拖拽操作。这是前端的核心和难点。",
        "epic": "智能排课引擎",
        "milestone": "V1.0 (MVP)",
        "dependencies": ["TKS-003"],
        "priority": "高",
        "status": "To Do",
        "effort_points": 8,
        "tags": ["frontend", "ui", "component"],
        "acceptance_criteria": [
          "组件能正确渲染课表数据",
          "支持拖动课程卡片",
          "拖动时能实时反馈目标位置是否可用"
        ]
      },
      {
        "task_id": "TKS-011",
        "title": "[后端] 手动调课API",
        "description": "提供单个课程的移动、交换的API，每次调用时都进行冲突检测。",
        "epic": "智能排课引擎",
        "milestone": "V1.0 (MVP)",
        "dependencies": ["TKS-008"],
        "priority": "高",
        "status": "To Do",
        "effort_points": 3,
        "tags": ["backend", "api"],
        "acceptance_criteria": [
          "API能成功移动课程到无冲突的位置",
          "API在遇到冲突时返回失败和原因"
        ]
      },
      {
        "task_id": "TKS-012",
        "title": "[前端] 整合排课与调课功能",
        "description": "将<一键排课>、课表展示、拖拽调课等功能整合到一个完整的页面流程中。",
        "epic": "智能排课引擎",
        "milestone": "V1.0 (MVP)",
        "dependencies": ["TKS-009", "TKS-010", "TKS-011"],
        "priority": "高",
        "status": "To Do",
        "effort_points": 5,
        "tags": ["frontend", "integration"],
        "acceptance_criteria": [
          "用户可以点击按钮开始排课",
          "排课完成后课表能自动显示",
          "用户可以在课表上进行拖拽微调"
        ]
      },
      {
        "task_id": "TKS-013",
        "title": "[前端] 多维度课表查询、打印与导出",
        "description": "开发班级、教师维度的课表查询视图，并实现配套的打印样式和导出到Excel的功能。",
        "epic": "日常应用与输出",
        "milestone": "V1.0 (MVP)",
        "dependencies": ["TKS-012"],
        "priority": "高",
        "status": "To Do",
        "effort_points": 5,
        "tags": ["frontend", "feature"],
        "acceptance_criteria": [
          "可以按班级或教师查看课表",
          "打印预览样式干净整洁",
          "导出的Excel文件格式正确"
        ]
      },
      {
        "task_id": "TKS-014",
        "title": "[后端] Excel数据批量导入功能",
        "description": "开发后端逻辑，用于解析用户上传的特定模板的Excel文件，并批量导入基础数据。",
        "epic": "基础数据设置",
        "milestone": "V1.1",
        "dependencies": ["TKS-004"],
        "priority": "中",
        "status": "To Do",
        "effort_points": 5,
        "tags": ["backend", "feature", "excel"],
        "acceptance_criteria": [
          "可以成功解析符合模板的Excel文件",
          "对于格式错误或数据冲突有明确的提示"
        ]
      },
      {
        "task_id": "TKS-015",
        "title": "[前端] Excel数据导入界面",
        "description": "提供文件上传控件和导入说明界面。",
        "epic": "基础数据设置",
        "milestone": "V1.1",
        "dependencies": ["TKS-014"],
        "priority": "中",
        "status": "To Do",
        "effort_points": 2,
        "tags": ["frontend", "ui"],
        "acceptance_criteria": [
          "用户可以上传文件",
          "导入后能看到成功或失败的结果反馈"
        ]
      },
      {
        "task_id": "TKS-016",
        "title": "[后端] 监考安排算法与API",
        "description": "开发用于分配考场和监考教师的独立算法，并封装成API。",
        "epic": "日常应用与输出",
        "milestone": "V2.0",
        "dependencies": ["TKS-008"],
        "priority": "中",
        "status": "To Do",
        "effort_points": 8,
        "tags": ["backend", "feature", "algorithm"],
        "acceptance_criteria": [
          "能根据考生人数自动分配和拆分考场",
          "能均衡地为教师分配监考任务"
        ]
      },
      {
        "task_id": "TKS-017",
        "title": "[前端] 监考安排管理界面",
        "description": "开发用于设置考试、运行安排、查看和打印监考表的完整前端界面。",
        "epic": "日常应用与输出",
        "milestone": "V2.0",
        "dependencies": ["TKS-016"],
        "priority": "中",
        "status": "To Do",
        "effort_points": 5,
        "tags": ["frontend", "feature", "ui"],
        "acceptance_criteria": [
          "用户可以完成一次完整的监考安排流程",
          "可以打印总的监考表和教师个人监考条"
        ]
      }
  ]
}